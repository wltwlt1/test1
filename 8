#include <iostream>
using namespace std;
void InsertSort(int A[],int n){
	int i,j;
	
	for(i=2;i<=n;i++){
		A[0]=A[i];
		for(j=i-1;A[j]>A[i];j--){
			A[j+1]=A[j];
		}
		A[j]=A[i];
	}
	
}
void InsertSort(int A[],int n){
	int low,high,mid,i,j;	
	for(i=2;i<=n;i++){
		A[0]=A[i];
		while(low<=high){
			mid=(low+high)/2;
			if(A[0]<A[mid]){
				high=mid-1;
				
			}else
				low=mid+1;
		}
		for(j=i-1;j>=high+1;j--){
			A[j+1]=A[j];
		}
		A[high+1]=A[0];
	}
	
}
void ShellSort(int A[],int n){
	int dk,i,j;
	for(dk=n/2;dk>=1;dk=dk/2){
		for(i=dk+1;i<=n;i=i+1){
			A[0]=A[i];
			for(j=i-dk;j>0 && A[0]<A[j];j-=dk){
				A[j+dk]=A[j];
			}
			A[j+dk]=A[0];
		}
	}

}
void BubbleSort(int A[],int n){
	for(int i=0;i<=n-1;i++){
		bool flag=false;
		for(int j=n-1;j>i;i--){
			if(A[j]>A[j-1])
				swap(A[j],A[j-1];
				flag=true;
			
		}
		if(flag==false)
			return ;
	}
}
void QuickSort(int A[];int low;int high){
	if(low<high){
		int pivotpos=Partition(A[],low,high);
		QuickSort(A,low,pivotpos-1);
		QuickSort(A,pivotpos+1,high);
	}
}
void Partition(int A[];int low;int high){
	int pivot=A[low];
	while(low<high){
		while(low<high && pivot<A[high]) high--;
		A[low]=A[high];
		while(low<high && pivot>=A[low]) low++;
		A[high]=A[low];
	}
	A[low]=pivot;
	return low;
}
void SelectSort(int A[];int n){
	for(int i=0;i<=n-1;i++){
		int min=i;
		for(int j=i+1;j<=n-1;j++){
			if(A[min]>A[j])
				min=j;
				
		}
		if(min!=i) swap(A[i],A[min]);
	}
}
void BuildMaxHeap(int A[];int len){
	for(int i=len/2;i>0;i--)
		HeadAdjust(A,i,len);
}
void HeadAdjust(int A[];int k;int len){
	A[0]=A[k];
	for(int i=2*k;i<=len;i*=2){
		if(i<len && A[i]<A[i+1])
			i++;
		if(A[0]<A[i]){
			A[k]=A[i];
			k=i;
			
		}
		else
			break;
	}
	A[k]=A[0];
}
void HeapSort(int A[],int len){
	BuildMaxHeap(A,len);
	for(int i=len;i>1;i--){
		Swap(A[i],A[1]);
		HeadAdjust(A,1,i-1);
	}
}

int *B=(int *)malloc((n+1)*sizeof(int));
void Merge(int A[];int low; int high; int mid){
	int i,j,k;
	for(k=low;k<=high;k++){
		B[k]=A[k];
	}
	for(i=low,j=mid+1,k=i;i<=mid&&j<=high;k++){
		if(B[i]<B[j])
			A[k]=B[i++];
		else
			A[k]=B[j++];
	}
}
void MergeSort(int A[];int low;int high){
	if(low<high){
		int mid=(low+high)/2;
		 MergeSort(A,low,mid);
		 MergeSort(A,mid+1,high);
		Merge(A,low,mid,high);
	}
	
}
int main()
{

   return 0;
}
