#include <iostream>
using namespace std;
typedef struct ArcNode{
	int adjvex;
	struct ArcNode *nextarc;
	//InfoType info;
}ArcNode;
typedef struct VNode{
	VertexType data;
	ArcNode *firstarc;
}VNode,AdjList[MaxVertesNum];
typedef struct{
	AdjList vertice;
	int vexnum,arcnum;
}ALGraph;
bool visited[MAX_VERTEX_NUM];
void BFSTraverse(Graph G){
	for(int i=0;i<G.vexnum;i++){
		visited[i]==false;
	}
	InitQueue(Q);
	for(int i=0;i<G.vexnum;i++){
		if(!visited[i])
			BFS(G,i);
	}
}
void BFS(Graph G,int i){
	visit[i];
	visited[i]==true;
	EnQueue(Q,i);
	while(!IsEmpty(Q)){
		DeQueue(Q,v);
		for(p=G.vertices[v].firstarc;p;p->p.nextarc){
			w=p->adjvex;
			if(!visited){
				visit[w];
				visited[w]==true;
				EnQueue(G,w);
			}
		}
	}
}
void BFS(Graph G,int i){
	visit[i];
	visited[i]==true;
	EnQueue(Q,i);
	while(!IsEmpty(Q)){
		DeQueue(Q,v);
		for(int j=0;j<G.vexnum;j++){			
			if(!visited[j] && G.edge[v][j]==1){
				visit[j];
				visited[j]==true;
				EnQueue(G,j);
			}
		}
	}
}
void DFSTraverse(Graph G){
	for(int i=0;i<G.vexnum;i++){
		visited[i]==false;
	}
	for(int i=0;i<G.vexnum;i++){
		if(!visited[i])
			DFS(G,i);
	}
}
void DFS(Graph G,int i){
	visit[i];
	visited[i]==true;
	for(p=G.vertices[i].firstarc;p;p->p.nextarc){
		w=p->adjvex;
		if(!visited[w]){
			DFS(G,w);
		}
	}	
}
void DFS(Graph G,int i){
	visit[i];
	visited[i]==true;
	for(int j=0;j<G.vexnum;j++){			
		if(!visited[j] && G.edge[i][j]==1){
			DFS(G,j);
				
		}
	}
	
}
int main()
{
  
   return 0;
}
