#include <iostream>
using namespace std;
#define MaxSize 10
typedef struct{
	int data[MaxSize];
	int top;
}SqStack;
bool bracketCheck(char str[], int length){
	SqStack S;
	InitStack(S);
	for(int i=0;i<length;i++){
		if(str[i]=='(' || str[i]=='[' || str[i]=='{'){
			push(S,str[i]);
        }
		if(str[i]==')' || str[i]==']' || str[i]=='}'){
			if(S.top==-1){
				return false;
			}else{
				char topElem;
				pop(S,topElem);
				if(str[i]==')' && topElem!='(')
					return false;
				if(str[i]==']' && topElem!='[')
					return false;
				if(str[i]=='}' && topElem!='{')
					return false;
				
				
			}
		}
	}
	if(S.top==-1)
		return true;
}
void count_equation(char str[],int length){
	SqStack S;
	InitStack(S);
	
	for(int i=0;i<length;i++){
		if(str[i]=='+' || str[i]=='*' || str[i]=='-' || str[i]=='/'){
			char topElem;
			char top_1_Elem;
			int T;
			char P;
			pop(S,topElem);
			pop(S,top_1_Elem);
			
			if (str[i]=='+'){
				T=((int) top_1_Elem + (int) topElem);
				P=(char) T;
				push(S,P);
			}
			if (str[i]=='*'){
				T=( (int) top_1_Elem * (int) topElem);
				P=(char) T;
				push(S,P);
			}
			if (str[i]=='-'){
				T=( (int) top_1_Elem - (int) topElem);
				P=(char) T;
				push(S,P);
			}
			if (str[i]=='/'){
				T=( (int) top_1_Elem / (int) topElem);
				P=(char) T;
				push(S,P);
			}
		}else{
			push(S,str[i]);
		}
	}
	char last_score;
	pop(S,last_score);
	return last_score;
}
int main()
{
  
   return 0;
}
